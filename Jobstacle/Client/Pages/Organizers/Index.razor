@page  "/organizers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject NavigationManager _navmanager
@inject HttpInterceptorService _interceptor
@implements IDisposable 


<div style="display: flex; align-items: center;">
	<img src="css/organizers.png" alt="Organizers Image" style="width: 60px; height: 60px; margin-right: 10px;">
<h3>Organizers</h3>
	<a href="/organizers/create" class="btn btn-secondary custom-btn" style="margin-left: 10px;">
	<span class="oi oi-plus"></span>
	Create New Organizers
</a>
</div>
<br />
<br />

@if (Organizers == null)
{
	<div class="alert alert-info">Loading Organizers...</div>
}
else
{
	<table class="table table-responsive" id="organizersTable">
		<thead>
			<tr>
				<th>Logo</th>
				<th>Name</th>
				<th>Contact Number</th>
				<th>Email</th>
				<th>Description</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var organizer in Organizers)
			{
			<tr>
					<td>
						@if (organizer.OrgLogo != null && organizer.OrgLogo.Length > 0)
						{
							<img src="data:image/png;base64,@Convert.ToBase64String(organizer.OrgLogo)" alt="Organizer Logo" style="max-width: 100px; max-height: 100px;" />
						}
						else
						{
							<span>No Logo</span>
						}
					</td>
				<td>@organizer.Name</td>
				<td>@organizer.ContactNumber</td>
				<td>@organizer.Email</td>
				
					<td>
						<button class="btn btn-secondary" @onclick="@(() => ToggleDescription(organizer.Id))">
							@if (IsDescriptionVisible(organizer.Id))
							{
								<span>Hide</span>
							}
							else
							{
								<span>Show More</span>
							}
						</button>
						@if (IsDescriptionVisible(organizer.Id))
						{
							<div>
								@organizer.Description
							</div>
						}
					</td>
				<td>
					<a href="/Organizers/view/@organizer.Id" class="btn btn-primary">
						<span class="oi oi-book"></span>
					</a>
					<a href="/Organizers/edit/@organizer.Id" class="btn btn-warning">
						<span class="oi oi-pencil"></span>
					</a>
					<button class="btn btn-danger" @onclick="@(()=>Delete(organizer.Id))">
						<span class="oi oi-delete"></span>
					</button>
				</td>
			</tr>
			}
		</tbody>
	</table>
}
	

@code {
	private List<Organizer>? Organizers;
	private bool isDataTableInitialized = false;
	private Dictionary<int, bool> showDescriptionStates = new Dictionary<int, bool>();

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Organizers = await _client.GetFromJsonAsync<List<Organizer>>($" {Endpoints.OrganizersEndpoint}");

		if (!isDataTableInitialized)
		{
			await js.InvokeVoidAsync("AddDataTable", "#organizersTable");
			isDataTableInitialized = true;
		}
	}
	async Task Delete(int organizerId)
	{
		if (Organizers != null)
		{
			var organizer = Organizers.First(q => q.Id == organizerId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {organizer.Name}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.OrganizersEndpoint}/{organizerId}");
				await OnInitializedAsync();
			}
		}
	}

	void ToggleDescription(int organizerId)
	{
		if (showDescriptionStates.ContainsKey(organizerId))
		{
			showDescriptionStates[organizerId] = !showDescriptionStates[organizerId];
		}
		else
		{
			showDescriptionStates.Add(organizerId, true);
		}
	}

	bool IsDescriptionVisible(int organizerId)
	{
		return showDescriptionStates.ContainsKey(organizerId) && showDescriptionStates[organizerId];
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#organizersTable");
	}
}
