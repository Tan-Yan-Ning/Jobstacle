@inject HttpClient _client


<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled" >
        <div class="form-group">
            <label>Staff Picture: </label>
            <div>
                @if (staff.StaffPic != null && staff.StaffPic.Length > 0)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(staff.StaffPic)" alt="Staff Picture" style="max-width: 100px; max-height: 100px;" />
                }
                else
                {
                    <span>No Logo</span>
                }

                @if (!Disabled)
                {
                    <InputFile OnChange="HandleFileUpload" class="form-control" />
                }

                <ValidationMessage For="@(()=>staff.StaffPic)" />
            </div>
        </div>

    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@staff.Name" class="form-control" />
            <ValidationMessage For="@(() => staff.Name)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email: </label>
        <div>
            <InputText @bind-Value="@staff.Email" class="form-control" />
            <ValidationMessage For="@(() => staff.Email)" />
        </div>
    </div>

    <div class="form-group">
        <label>Department: </label>
        <div>
            <InputText @bind-Value="@staff.Department" class="form-control" />
            <ValidationMessage For="@(() => staff.Department)" />
        </div>
    </div>

    <div class="form-group">
        <label>Position: </label>
        <div>
            <InputText @bind-Value="@staff.Position" class="form-control" />
            <ValidationMessage For="@(() => staff.Position)" />
        </div>
    </div>

    <div class="form-group">
        <label>Contact Number: </label>
        <div>
            <InputText @bind-Value="@staff.ContactNumber" class="form-control" />
            <ValidationMessage For="@(() => staff.ContactNumber)" />
        </div>
    </div>

    </fieldset>
    <br />
    

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-secondary custom-btn">
            @ButtonText
        </button>
    }
    <BackToList Target="staffs" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Staff? staff { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    staff.StaffPic = memoryStream.ToArray();
                }
            }
        }
    }
  

}
