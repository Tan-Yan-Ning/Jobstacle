@inject HttpClient _client


<EditForm Model="@job" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Title: </label>
        <div>
            <InputText @bind-Value="job.Title" class="form-control" />
            <ValidationMessage For="@(() => job.Title)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description: </label>
        <div>
            <InputText @bind-Value="job.Description" class="form-control" />
            <ValidationMessage For="@(() => job.Description)" />
        </div>
    </div>
    <div class="form-group">
        <label>Location: </label>
        <div>
            <InputText @bind-Value="job.Location" class="form-control" />
            <ValidationMessage For="@(() => job.Location)" />
        </div>
    </div>
    <div class="form-group">
        <label>Salary: </label>
        <div>
            <InputNumber @bind-Value="job.Salary" class="form-control" />
            <ValidationMessage For="@(() => job.Salary)" />
        </div>
    </div>

    <div class="form-group">
        <label>Company: </label>
        <div>
            <InputSelect @bind-Value="job.CompanyID" class="form-control">
                <option value="">-- Select Company --</option>
                @if (Companies != null)
                {
                    foreach (var company in Companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => job.CompanyID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="job.StaffID" class="form-control">
                <option value="">-- Select Staff --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
                        <option value="@staff.Id">@staff.Name </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => job.StaffID)" />
        </div>
    </div>


    
    
    </fieldset>
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="jobs" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Job? job { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Company>? Companies;
    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

}